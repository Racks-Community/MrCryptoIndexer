enum Background {
  Blue
  Brown
  DarkBlue
  DarkGray
  Fuchsia
  Gray
  Lime
  Mint
  MoneyGreen
  Orange
  Pink
  Purple
  VividYellow
  Yellow
}

enum Background {
  Blue
  Brown
  DarkBlue
  DarkGray
  Fuchsia
  Gray
  Lime
  Mint
  MoneyGreen
  Orange
  Pink
  Purple
  VividYellow
  Yellow
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

enum Clothes {
  ATM
  Army
  BTCBowTie
  BlackBTCBowTie
  BlueBowTie
  BlueHoodie
  CianBowTie
  ClassicBowTie
  CreamCardigan
  DeepBlueBowTie
  DeepBlueSimple
  GreenBowTie
  GreenMoney
  GreyBTC
  GreyBowTie
  MyProShirt
  OffShoreHoodie
  OrangeBowTie
  PinkBowTie
  PinkCardigan
  PinkNYellowBowTie
  Pumpkin
  RacksShirt
  RedBTC
  RukaShirt
  SpacesuitBlack
  SpacesuitWhite
  SpainBTCBowTie
  Spruce
  SteelBlue
  VivaRacksMafia
  WhiteBowTie
}

enum Clothes {
  ATM
  Army
  BTCBowTie
  BlackBTCBowTie
  BlueBowTie
  BlueHoodie
  CianBowTie
  ClassicBowTie
  CreamCardigan
  DeepBlueBowTie
  DeepBlueSimple
  GreenBowTie
  GreenMoney
  GreyBTC
  GreyBowTie
  MyProShirt
  OffShoreHoodie
  OrangeBowTie
  PinkBowTie
  PinkCardigan
  PinkNYellowBowTie
  Pumpkin
  RacksShirt
  RedBTC
  RukaShirt
  SpacesuitBlack
  SpacesuitWhite
  SpainBTCBowTie
  Spruce
  SteelBlue
  VivaRacksMafia
  WhiteBowTie
}

type CollectionInfo {
  address: String!
  description: String!
  holders: Int!
  lastSale: String!
  name: String!
  volumen: [Volumen!]!
}

type Currency {
  amount: Float!
  name: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type E7L {
  E7LTokens: [E7LToken!]!
  contractAddress: String!
  imageURL: String!
  linked: Int!
  name: String!
  supply: Int!
  synchronized: Int!
}

type E7LToken {
  E7L: E7L!
  Owner: Holder!
  imageURL: String!
  linked: Boolean!
  metadata: String!
  mrCrypto: MrCrypto
  synced: Boolean!
  tokenId: Int!
}

enum Eye {
  Anime
  BTC
  Bad
  BadBlue
  BadYellow
  Classic
  Dead
  Hollow
  HollowBTC
  HollowLaser
  Kawaii
  Laser
  Party
  Small
  WallStreet
}

enum Headwear {
  BTCBlackCap
  BTCHat
  BTCRedCap
  BTCWhiteCap
  Bald
  BitBaseHat
  BlondeHair
  BlondeStyledHair
  BlueHat
  CianHat
  ClassicHat
  DeepBlueHat
  DemonHorns
  Dreadlocks
  GradientHaircut
  GreenHat
  HelicopterHat
  Hoodie
  JesusCrypt
  LineHaircut
  LongBlondeHair
  LongDarkHair
  McHodlerBlackCap
  McHodlerRedCap
  MintHat
  MyProCap
  OrangeBeanie
  OrangeHat
  PinkHat
  PinkNYellowHat
  PurbleBeanie
  RedBeanie
  RedHat
  SpainHat
  SpruceHat
  StyledBrownHair
  TrumpHair
  VividGreenHat
  WhiteHair
  WhiteHat
  WillyBeret
  XmasBeanie
}

enum Eye {
  Anime
  BTC
  Bad
  BadBlue
  BadYellow
  Classic
  Dead
  Hollow
  HollowBTC
  HollowLaser
  Kawaii
  Laser
  Party
  Small
  WallStreet
}

enum Headwear {
  BTCBlackCap
  BTCHat
  BTCRedCap
  BTCWhiteCap
  Bald
  BitBaseHat
  BlondeHair
  BlondeStyledHair
  BlueHat
  CianHat
  ClassicHat
  DeepBlueHat
  DemonHorns
  Dreadlocks
  GradientHaircut
  GreenHat
  HelicopterHat
  Hoodie
  JesusCrypt
  LineHaircut
  LongBlondeHair
  LongDarkHair
  McHodlerBlackCap
  McHodlerRedCap
  MintHat
  MyProCap
  OrangeBeanie
  OrangeHat
  PinkHat
  PinkNYellowHat
  PurbleBeanie
  RedBeanie
  RedHat
  SpainHat
  SpruceHat
  StyledBrownHair
  TrumpHair
  VividGreenHat
  WhiteHair
  WhiteHat
  WillyBeret
  XmasBeanie
}

type Holder {
  address: String!
  mrCryptosOwned: [MrCrypto!]!
  numberOfMrCryptos: Int!
}

enum Moustache {
  BeardTonge
  Black
  BlackMoustache
  Cigar
  CigarSimple
  Classic
  Depilated
  MintTonge
  SimpleCigar
  SkullMouth
  Smile
  SmileCigar
  Tonge
  WhiteMoustache
}

enum Moustache {
  BeardTonge
  Black
  BlackMoustache
  Cigar
  CigarSimple
  Classic
  Depilated
  MintTonge
  SimpleCigar
  SkullMouth
  Smile
  SmileCigar
  Tonge
  WhiteMoustache
}

type MrCrypto {
  E7LTokens: [E7LToken!]!
  Owner: Holder!
  Transfers: [Transfer!]!
  background: String!
  clothes: String!
  eyes: String!
  headwear: String!
  imageURL: String!
  metadata: String!
  moustache: String!
  ranking: Int!
  score: Float!
  ranking: Int!
  score: Float!
  tokenId: Int!
  type: String!
}

input MrCryptoFilter {
  background: Background
  clothes: Clothes
  eye: Eye
  headwear: Headwear
  moustache: Moustache
  type: Type
}

input MrCryptoFilter {
  background: Background
  clothes: Clothes
  eye: Eye
  headwear: Headwear
  moustache: Moustache
  type: Type
}

enum OrderByInput {
  asc
  desc
}

type Payment {
  Currencies: [Currency!]!
  Transfer: [Transfer!]!
  blockNumber: BigInt!
}

type Query {
  collectionInfo: CollectionInfo!
  e7lCollections: [E7L!]!
  e7lCollections: [E7L!]!
  e7lTokens(first: Int! = 100, skip: Int! = 0): [E7LToken!]!
  e7lTokensByAddress(address: String!): [E7LToken!]!
  isAuthenticated: Boolean!
  mrCryptoById(tokenId: Int!): MrCrypto!
  mrCryptoTokens(filter: MrCryptoFilter, first: Int! = 100, skip: Int! = 0): [MrCrypto!]!
  mrCryptosByAddress(address: String!): [MrCrypto!]!
  sales(first: Int! = 100, order: OrderByInput! = desc, orderBy: SalesOrderByEnum! = blockNumber, skip: Int! = 0): [Payment!]!
  topHolders(take: Int! = 10): [Holder!]!
  transfers(first: Int! = 100, order: OrderByInput! = desc, skip: Int! = 0): [Transfer!]!
}

enum SalesOrderByEnum {
  amount
  blockNumber
}

type Transfer {
  MrCrypto: MrCrypto!
  Payment: Payment
  blockNumber: BigInt!
  from: String!
  to: String!
  txHash: String!
}

enum Type {
  Alien
  Cat
  Human
  Martian
  Monkey
  MrSkull
  Nsujpg
  Panda
  Zombie
}

enum Type {
  Alien
  Cat
  Human
  Martian
  Monkey
  MrSkull
  Nsujpg
  Panda
  Zombie
}

type Volumen {
  amount: Float!
  currency: String!
}